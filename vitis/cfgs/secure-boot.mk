# SPDX-License-Identifier: Apache-2.0
#
################################################################################
##
## Copyright 2024 Missing Link Electronics, Inc.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
################################################################################
##
##  File Name      : secure-boot.mk
##  Initial Author : Cornelia HÃ¶hl
##                   <cornelia.hoehl@missinglinkelectronics.com>
##
##                   Based on earlier code by Stefan Wiehler.
##
################################################################################
##
##  File Summary   : Secure Boot configuration for vitis.mk
##
################################################################################

# user arguments
ifeq ($(KEYS),)
$(error KEYS is unset)
endif

BLACK_IV_KEY ?= $(KEYS)/black_iv.txt
PSK_FILE ?= $(KEYS)/psk0.pem
SSK_FILE ?= $(KEYS)/ssk0.pem


# bootgen attributes
GEN_BIF_ATTR_AUTH = authentication=rsa
GEN_BIF_ATTR_ENC = , encryption=aes, #, blocks=1728(*)
BIT_BIF_ATTR_DST = destination_device=pl

# These keys will be generated by bootgen (if not already existing).
NKY_FSBL = aeskeyfile=$(O)/secure_boot/fsbl.nky
NKY_ATF = aeskeyfile=$(O)/secure_boot/atf.nky
NKY_BIT = aeskeyfile=$(O)/secure_boot/bit.nky

ifeq ($(AUTH_ONLY),yes)
GEN_BIF_ATTR_ENC :=

NKY_FSBL :=
NKY_ATF :=
NKY_BIT :=
endif


#
## secure BOOT.BIN
#
BOOTGEN_PRJS += secure_boot

# bootgen parameters 
secure_boot_BIF_ARCH = zynqmp
secure_boot_BIF_ARGS_EXTRA = -p $(PART_NAME) -log debug -encryption_dump

# list of attributes
secure_boot_BIF_ATTRS = pskfile sskfile auth_params keysrc_encryption \
	bh_key_iv fsbl_config fsbl pmufw bit atf dtb uboot

# auth keys & config
secure_boot_pskfile_BIF_ATTR = pskfile
secure_boot_pskfile_BIF_FILE = $(PSK_FILE)
secure_boot_sskfile_BIF_ATTR = sskfile
secure_boot_sskfile_BIF_FILE = $(SSK_FILE)

secure_boot_auth_params_BIF_ATTR = auth_params
secure_boot_auth_params_BIF_FILE = spk_id=0; ppk_select=0; spk_select = spk-efuse
secure_boot_auth_params_BIF_FILE_NO_DEP = yes
secure_boot_auth_params_BIF_FILE_NOTFILE = yes

secure_boot_fsbl_config_BIF_ATTR = fsbl_config
secure_boot_fsbl_config_BIF_FILE = puf4kmode, shutter=0x0100005E
secure_boot_fsbl_config_BIF_FILE_NOTFILE = yes
secure_boot_fsbl_config_BIF_FILE_NO_DEP = yes

ifneq ($(AUTH_ONLY),yes)
# encryption config & key iv
secure_boot_fsbl_config_BIF_FILE += ,opt_key
secure_boot_keysrc_encryption_BIF_ATTR = keysrc_encryption
secure_boot_keysrc_encryption_BIF_FILE = efuse_blk_key
secure_boot_keysrc_encryption_BIF_FILE_NO_DEP = yes
secure_boot_keysrc_encryption_BIF_FILE_NOTFILE = yes
secure_boot_bh_key_iv_BIF_ATTR = bh_key_iv
secure_boot_bh_key_iv_BIF_FILE = $(BLACK_IV_KEY)
endif

# fsbl
secure_boot_fsbl_BIF_ATTR = bootloader, destination_cpu=a53-0, \
	$(GEN_BIF_ATTR_AUTH) $(GEN_BIF_ATTR_ENC) \
	$(NKY_FSBL)
ifneq ($(patsubst /%,,$(FSBL)),)
secure_boot_fsbl_BIF_FILE = ../../$(FSBL)
else
secure_boot_fsbl_BIF_FILE = $(FSBL)
endif

# pmufw
secure_boot_pmufw_BIF_ATTR = pmufw_image
ifneq ($(patsubst /%,,$(PMUFW)),)
secure_boot_pmufw_BIF_FILE = ../../$(PMUFW)
else
secure_boot_pmufw_BIF_FILE = $(PMUFW)
endif

# bitstream
secure_boot_bit_BIF_ATTR = $(BIT_BIF_ATTR_DST), $(GEN_BIF_ATTR_AUTH) \
	$(GEN_BIF_ATTR_ENC) $(NKY_BIT)
ifneq ($(patsubst /%,,$(BIT)),)
secure_boot_bit_BIF_FILE = ../../$(BIT)
else
secure_boot_bit_BIF_FILE = $(BIT)
endif

# atf
secure_boot_atf_BIF_ATTR = destination_cpu=a53-0, exception_level=el-3, \
	trustzone, $(GEN_BIF_ATTR_AUTH) $(GEN_BIF_ATTR_ENC) \
	$(NKY_ATF)
ifneq ($(patsubst /%,,$(ATF)),)
secure_boot_atf_BIF_FILE = ../../$(ATF)
else
secure_boot_atf_BIF_FILE = $(ATF)
endif

# dtb
secure_boot_dtb_BIF_ATTR = destination_cpu=a53-0, load=0x00100000, \
	$(GEN_BIF_ATTR_AUTH)
ifneq ($(patsubst /%,,$(SYSTEM_DTB)),)
secure_boot_dtb_BIF_FILE = ../../$(SYSTEM_DTB)
else
secure_boot_dtb_BIF_FILE = $(SYSTEM_DTB)
endif

# uboot
secure_boot_uboot_BIF_ATTR = destination_cpu=a53-0, exception_level=el-2, \
	$(GEN_BIF_ATTR_AUTH)
ifneq ($(patsubst /%,,$(UBOOT)),)
secure_boot_uboot_BIF_FILE = ../../$(UBOOT)
else
secure_boot_uboot_BIF_FILE = $(UBOOT)
endif

# include boot.scr and image.ub, if desired
ifeq ($(INCLUDE_IMAGE),yes)
secure_boot_bootscr_BIF_ATTR = destination_cpu=a53-0, partition_owner=fsbl, \
	load=0x20000000, $(GEN_BIF_ATTR_AUTH)
ifneq ($(patsubst /%,,$(BOOT_SCR)),)
secure_boot_bootscr_BIF_FILE = ../../$(BOOT_SCR)
else
secure_boot_bootscr_BIF_FILE = $(BOOT_SCR)
endif
secure_boot_bootscr_BIF_NO_DEP = yes

# IMPORTANT: Keep load address of image.ub in sync with secure-boot.mk!
secure_boot_imageub_BIF_ATTR = destination_cpu=a53-0, partition_owner=fsbl, \
	load=0x10000000, $(GEN_BIF_ATTR_AUTH)
ifneq ($(patsubst /%,,$(IMAGE)),)
secure_boot_imageub_BIF_FILE = ../../$(IMAGE)
else
secure_boot_imageub_BIF_FILE = $(IMAGE)
endif

secure_boot_BIF_ATTRS += bootscr imageub
endif
